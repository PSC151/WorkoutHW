const API = {
  async getLastWorkout() {
    let res;
    try {
      res = await fetch("/api/workouts");
    } catch (err) {
      console.log(err)
    }
    const json = await res.json();

    return json[json.length - 1];
  },
  async addExercise(data) {
    const id = location.search.split("=")[1];

    const res = await fetch("/api/workouts/" + id, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    });

    const json = await res.json();

    return json;
  },
  async createWorkout(data = {}) {
    const res = await fetch("/api/workouts", {
      method: "POST",
      body: JSON.stringify(data),
      headers: { "Content-Type": "application/json" }
    });

    const json = await res.json();

    return json;
  },

  async getWorkoutsInRange() {
    const res = await fetch(`/api/workouts/range`);
    const json = await res.json();

    return json;
  },
};
-----------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" />
  <link rel="stylesheet" href="style.css" />
  <title>Fitness Tracker</title>
</head>

<body>
  <nav>
    <a href="/">Fitness Tracker</a>
    <a href="/stats">Dashboard</a>
  </nav>
  <div class="wrapper">
    <header>
      <h1>Fitness Tracker</h1>
    </header>
    <div class="ui container exercise">
      <div class="ui raised card m-auto">
        <h2>Add Your Exercise</h2>
        <form action="POST">
          <div class="workout-type">
            <label for="type">Exercise Type:</label>
            <select name="type" id="type">
              <option disabled selected>Select Exercise Type</option>
              <option value="resistance">Resistance</option>
              <option value="cardio">Cardio</option>
            </select>
          </div>
          <div class="cardio-form d-none">
            <div class="cardio-name">
              <label for="cardio-name">Name:</label>
              <input type="text" name="cardio-name" id="cardio-name" placeholder="Running" />
            </div>
            <div class="distance">
              <label for="distance">Distance (miles):</label>
              <input type="number" name="distance" id="distance" placeholder="5" />
            </div>
            <div class="duration">
              <label for="duration">Duration (minutes):</label>
              <input type="number" name="duration" id="duration" placeholder="10" />
            </div>
          </div>
          <div class="resistance-form d-none">
            <div class="exercise">
              <label for="name">Exercise Name:</label>
              <input type="text" name="name" id="name" placeholder="Bench Press" />
            </div>
            <div class="weight">
              <label for="weight">Weight (lbs):</label>
              <input type="number" name="weight" id="weight" placeholder="200" />
            </div>
            <div class="sets">
              <label for="sets">Sets:</label>
              <input type="number" name="sets" id="sets" placeholder="4" />
            </div>
            <div class="reps">
              <label for="reps">Reps:</label>
              <input type="number" name="reps" id="reps" placeholder="10" />
            </div>
            <div class="resistance-duration">
              <label for="resistance-duration">Duration (minutes):</label>
              <input type="number" name="resistance-duration" id="resistance-duration" placeholder="10" />
            </div>
          </div>
          <div class="buttons">
            <button disabled class="huge ui blue button complete">
              Complete
            </button>
            <button disabled class="huge ui positive button add-another">
              Add Exercise
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div id="toast">
    Workout Added Successfully!
  </div>
  <script src="/api.js"></script>
  <script src="/exercise.js"></script>
</body>

</html>
------------------------------------------------------------------------------------------
const workoutTypeSelect = document.querySelector("#type");
const cardioForm = document.querySelector(".cardio-form");
const resistanceForm = document.querySelector(".resistance-form");
const cardioNameInput = document.querySelector("#cardio-name");
const nameInput = document.querySelector("#name");
const weightInput = document.querySelector("#weight");
const setsInput = document.querySelector("#sets");
const repsInput = document.querySelector("#reps");
const durationInput = document.querySelector("#duration");
const resistanceDurationInput = document.querySelector("#resistance-duration");
const distanceInput = document.querySelector("#distance");
const completeButton = document.querySelector("button.complete");
const addButton = document.querySelector("button.add-another");
const toast = document.querySelector("#toast");
const newWorkout = document.querySelector(".new-workout")

let workoutType = null;
let shouldNavigateAway = false;

async function initExercise() {
  let workout;

  if (location.search.split("=")[1] === undefined) {
    workout = await API.createWorkout()
    console.log(workout)
  }
  if (workout) {
    location.search = "?id=" + workout._id;
  }

}

initExercise();

function handleWorkoutTypeChange(event) {
  workoutType = event.target.value;

  if (workoutType === "cardio") {
    cardioForm.classList.remove("d-none");
    resistanceForm.classList.add("d-none");
  } else if (workoutType === "resistance") {
    resistanceForm.classList.remove("d-none");
    cardioForm.classList.add("d-none");
  } else {
    cardioForm.classList.add("d-none");
    resistanceForm.classList.add("d-none");
  }

  validateInputs();
}

function validateInputs() {
  let isValid = true;

  if (workoutType === "resistance") {
    if (nameInput.value.trim() === "name") {
      isValid = false;
    }

    if (weightInput.value.trim() === "weight") {
      isValid = false;
    }

    if (setsInput.value.trim() === "sets") {
      isValid = false;
    }

    if (repsInput.value.trim() === "reps") {
      isValid = false;
    }

    if (resistanceDurationInput.value.trim() === "resistance") {
      isValid = false;
    }
  } else if (workoutType === "cardio") {
    if (cardioNameInput.value.trim() === "cardio") {
      isValid = false;
    }

    if (durationInput.value.trim() === "duration") {
      isValid = false;
    }

    if (distanceInput.value.trim() === "distance") {
      isValid = false;
    }
  }

  if (isValid) {
    completeButton.removeAttribute("disabled");
    addButton.removeAttribute("disabled");
  } else {
    completeButton.setAttribute("disabled", true);
    addButton.setAttribute("disabled", true);
  }
}

async function handleFormSubmit(event) {
  event.preventDefault();

  let workoutData = {};

  if (workoutType === "cardio") {
    workoutData.type = "cardio";
    workoutData.name = cardioNameInput.value.trim();
    workoutData.distance = Number(distanceInput.value.trim());
    workoutData.duration = Number(durationInput.value.trim());
  } else if (workoutType === "resistance") {
    workoutData.type = "resistance";
    workoutData.name = nameInput.value.trim();
    workoutData.weight = Number(weightInput.value.trim());
    workoutData.sets = Number(setsInput.value.trim());
    workoutData.reps = Number(repsInput.value.trim());
    workoutData.duration = Number(resistanceDurationInput.value.trim());
  }

  await API.addExercise(workoutData);
  clearInputs();
  toast.classList.add("success");
}

function handleToastAnimationEnd() {
  toast.removeAttribute("class");
  if (shouldNavigateAway) {
    location.href = "/";
  }
}

function clearInputs() {
  cardioNameInput.value = "Cardio";
  nameInput.value = "Name";
  setsInput.value = "Sets";
  distanceInput.value = "Distance";
  durationInput.value = "Duration";
  repsInput.value = "Reps";
  resistanceDurationInput.value = "Resistance";
  weightInput.value = "Weight";
}

if (workoutTypeSelect) {
  workoutTypeSelect.addEventListener("change", handleWorkoutTypeChange);
}
if (completeButton) {
  completeButton.addEventListener("click", function (event) {
    shouldNavigateAway = true;
    handleFormSubmit(event);
  });
}
if (addButton) {
  addButton.addEventListener("click", handleFormSubmit);
}
toast.addEventListener("animationend", handleToastAnimationEnd);

document
  .querySelectorAll("input")
  .forEach(element => element.addEventListener("input", validateInputs));
------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" />
  <link rel="stylesheet" href="style.css" />
  <title>Fitness Tracker</title>
</head>

<body>
  <nav>
    <a href="/">Fitness Tracker</a>
    <a href="/stats">Dashboard</a>
  </nav>
  <div class="wrapper workout">
    <header>
      <h1>Fitness Tracker</h1>
    </header>
    <div class="ui container workout">
      <div class="ui raised card m-auto">
        <div class="prev-workout">
          <h3>Last Workout</h3>
          <div>
            <div class="workout-stats"></div>
            <div class="buttons">
              <a id="continue-btn" href="/exercise?" class="huge ui blue button">Continue Workout</a>
              <a href="/exercise" class="huge positive ui button">New Workout</a>
            </div>
          </div>
        </div>
        <div class="new-workout">
          <h3>Create Your First Workout</h3>
        </div>
      </div>
    </div>
  </div>
  </div>
  <div id="toast">
    Workout Added Successfully!
  </div>
  <script src="/api.js"></script>
  <script src="/workout.js"></script>
  <script src="/index.js"></script>
</body>

</html>
----------------------------------------------------------------------------------------

init();

async function init() {
  if (location.search.split("=")[1] === undefined) {
    const workout = await API.getLastWorkout();
    if (workout) {
      location.search = "?id=" + workout._id;
    } else {
      document.querySelector("#continue-btn").classList.add("d-none")
    }
  }
}
----------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="stylesheet" href="style.css" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
      crossorigin="anonymous"
    />
    <title>Fitness Chart</title>
  </head>
  <nav>
    <a href="/">Fitness Tracker</a>
  </nav>
  <body>
    <div class="container mt">
      <h1 class="text-center">Workout Dashboard</h1>
      <div class="row mt">
        <div class="col-md-6">
          <canvas id="canvas"></canvas>
        </div>
        <div class="col-md-6">
          <canvas id="canvas2"></canvas>
        </div>
      </div>
      <div class="row mt">
        <div class="col-md-6">
          <canvas id="canvas3"></canvas>
        </div>
        <div class="col-md-6">
          <canvas id="canvas4"></canvas>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script src="/api.js"></script>
    <script src="/stats.js"></script>
  </body>
</html>
---------------------------------------------------------------------------------------

// get all workout data from back-end

fetch("/api/workouts/range")
  .then(response => {
    return response.json();
  })
  .then(data => {
    populateChart(data);
  });


API.getWorkoutsInRange()

  function generatePalette() {
    const arr = [
    "#003f5c",
    "#2f4b7c",
    "#665191",
    "#a05195",
    "#d45087",
    "#f95d6a",
    "#ff7c43",
    "ffa600",
    "#003f5c",
    "#2f4b7c",
    "#665191",
    "#a05195",
    "#d45087",
    "#f95d6a",
    "#ff7c43",
    "ffa600"
  ]

  return arr;
  }
function populateChart(data) {
  let durations = duration(data);
  let pounds = calculateTotalWeight(data);
  let workouts = workoutNames(data);
  const colors = generatePalette();

  let line = document.querySelector("#canvas").getContext("2d");
  let bar = document.querySelector("#canvas2").getContext("2d");
  let pie = document.querySelector("#canvas3").getContext("2d");
  let pie2 = document.querySelector("#canvas4").getContext("2d");

  let lineChart = new Chart(line, {
    type: "line",
    data: {
      labels: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      datasets: [
        {
          label: "Workout Duration In Minutes",
          backgroundColor: "red",
          borderColor: "red",
          data: durations,
          fill: false
        }
      ]
    },
    options: {
      responsive: true,
      title: {
        display: true
      },
      scales: {
        xAxes: [
          {
            display: true,
            scaleLabel: {
              display: true
            }
          }
        ],
        yAxes: [
          {
            display: true,
            scaleLabel: {
              display: true
            }
          }
        ]
      }
    }
  });

  let barChart = new Chart(bar, {
    type: "bar",
    data: {
      labels: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
      ],
      datasets: [
        {
          label: "Pounds",
          data: pounds,
          backgroundColor: [
            "rgba(255, 99, 132, 0.2)",
            "rgba(54, 162, 235, 0.2)",
            "rgba(255, 206, 86, 0.2)",
            "rgba(75, 192, 192, 0.2)",
            "rgba(153, 102, 255, 0.2)",
            "rgba(255, 159, 64, 0.2)"
          ],
          borderColor: [
            "rgba(255, 99, 132, 1)",
            "rgba(54, 162, 235, 1)",
            "rgba(255, 206, 86, 1)",
            "rgba(75, 192, 192, 1)",
            "rgba(153, 102, 255, 1)",
            "rgba(255, 159, 64, 1)"
          ],
          borderWidth: 1
        }
      ]
    },
    options: {
      title: {
        display: true,
        text: "Pounds Lifted"
      },
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true
            }
          }
        ]
      }
    }
  });

  let pieChart = new Chart(pie, {
    type: "pie",
    data: {
      labels: workouts,
      datasets: [
        {
          label: "Excercises Performed",
          backgroundColor: colors,
          data: durations
        }
      ]
    },
    options: {
      title: {
        display: true,
        text: "Excercises Performed"
      }
    }
  });

  let donutChart = new Chart(pie2, {
    type: "doughnut",
    data: {
      labels: workouts,
      datasets: [
        {
          label: "Excercises Performed",
          backgroundColor: colors,
          data: pounds
        }
      ]
    },
    options: {
      title: {
        display: true,
        text: "Excercises Performed"
      }
    }
  });
}

function duration(data) {
  let durations = [];

  data.forEach(workout => {
    workout.exercises.forEach(exercise => {
      durations.push(exercise.duration);
    });
  });

  return durations;
}

function calculateTotalWeight(data) {
  let total = [];

  data.forEach(workout => {
    workout.exercises.forEach(exercise => {
      total.push(exercise.weight);
    });
  });

  return total;
}

function workoutNames(data) {
  let workouts = [];

  data.forEach(workout => {
    workout.exercises.forEach(exercise => {
      workouts.push(exercise.name);
    });
  });
  
  return workouts;
}
------------------------------------------------------------------------------------------

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html,
body,
.wrapper {
  height: 100%;
}

body {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

nav {
  background-color: #5793fd;
  color: #ffffff;
  height: 80px;
  padding: 10px;
  line-height: 3;
  font-size: 1.2rem;
}

a,
a:hover,
a:active,
a:visited {
  text-decoration: none;
  color: inherit;
}

header {
  height: 150px;
  padding-top: 80px;
  text-align: center;
  font-size: 1.5rem;
}

header h1 {
  transform: skewX(-2deg);
}

select {
  display: block;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  width: 100%;
  padding: 10px;
  background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E"),
    linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
  background-repeat: no-repeat, repeat;
  background-position: right 0.7em top 50%, 0 0;
  background-size: 0.65em auto, 100%;
}

select::-ms-expand {
  display: none;
}

select:hover {
  border-color: #888;
}

select:focus {
  border-color: #aaa;
  box-shadow: 0 0 1px 3px rgba(59, 153, 252, 0.7);
  box-shadow: 0 0 0 3px -moz-mac-focusring;
  color: #222;
  outline: none;
}

select option {
  font-weight: normal;
  width: 100%;
}

input {
  display: block;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  width: 100%;
  padding: 10px;
  background: linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
}

.wrapper {
  background-color: #f2f8ff;
  padding-bottom: 100px;
}

.card.m-auto,
.m-auto {
  margin: 0 auto;
  width: 500px;
}

form .workout-type,
form .cardio-form div,
form .resistance-form div {
  display: flex;
  margin-top: 30px;
}

form label {
  width: 150px;
  margin-top: 0.7rem;
}

form > button {
  float: right;
  margin-top: 20px;
}

form::after {
  content: " ";
  display: block;
  clear: both;
}

.d-none {
  display: none !important;
}

.exercise .ui.card {
  width: 400px;
  max-width: 600px;
}

.exercise .buttons {
  margin-top: 20px;
  display: flex;
}

.exercise .buttons button {
  width: 100%;
}

button {
  display: block;
  border: none;
  cursor: pointer;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  padding: 10px;
  background: linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
}

#toast {
  border-radius: 4px;
  border-width: 1px;
  font-size: 13px;
  line-height: 19.5px;
  margin: 0px 0px 16px;
  padding: 12px 59.5px 12px 20px;
  text-align: left;
  width: 300px;
  min-height: 80px;
  position: fixed;
  top: 10px;
  right: -320px;
  opacity: 0;
  transition: all 0.5s;
}

#toast.success {
  opacity: 1;
  right: 10px;
  background-color: hsl(94, 40%, 86%);
  color: hsl(94, 90%, 16%);
  transition: all 1.2s;
}

.workout-type,
form .cardio-form div,
form .resistance-form div {
  display: flex;
  margin-top: 30px;
}

form label {
  width: 150px;
  margin-top: 0.7rem;
}

form > button {
  float: right;
  margin-top: 20px;
}

form::after {
  content: " ";
  display: block;
  clear: both;
}

.d-none {
  display: none;
}

button {
  display: block;
  border: none;
  cursor: pointer;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  padding: 10px;
  background: linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
}

#toast {
  border-radius: 4px;
  border-width: 1px;
  font-size: 13px;
  line-height: 19.5px;
  margin: 0px 0px 16px;
  padding: 12px 59.5px 12px 20px;
  text-align: left;
  width: 300px;
  min-height: 80px;
  position: fixed;
  top: 10px;
  right: -320px;
  opacity: 0;
  transition: all 0.5s;
}

#toast.success {
  right: 10px;
  background-color: hsl(94, 40%, 86%);
  color: hsl(94, 90%, 16%);
  transition: all 0.5s;
}
.workout-type,
form .cardio-form div,
form .resistance-form div {
  display: flex;
  margin-top: 30px;
}

form label {
  width: 150px;
  margin-top: 0.7rem;
}

form > button {
  float: right;
  margin-top: 20px;
}

form::after {
  content: " ";
  display: block;
  clear: both;
}

.d-none {
  display: none;
}

button {
  display: block;
  border: none;
  cursor: pointer;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  padding: 10px;
  background: linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
}

#toast {
  border-radius: 4px;
  border-width: 1px;
  font-size: 13px;
  line-height: 19.5px;
  margin: 0px 0px 16px;
  padding: 12px 59.5px 12px 20px;
  text-align: left;
  width: 300px;
  min-height: 80px;
  position: fixed;
  top: 10px;
  right: -320px;
}

#toast.success {
  background-color: hsl(94, 40%, 86%);
  color: hsl(94, 90%, 16%);
  animation-name: toast;
  animation-duration: 2s;
  animation-fill-mode: forwards;
  animation-delay: 0.2s;
  animation-timing-function: cubic-bezier(0.785, 0.135, 0.15, 0.86);
}

.d-none {
  display: none;
}

.btn,
button {
  display: block;
  cursor: pointer;
  font-size: 1rem;
  border-radius: 6px;
  border: 1px solid #aaa;
  padding: 10px;
  background: linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);
}

form > button {
  margin: 5px;
  margin-top: 20px;
}

#toast {
  border-radius: 4px;
  border-width: 1px;
  font-size: 13px;
  line-height: 19.5px;
  margin: 0px 0px 16px;
  padding: 12px 59.5px 12px 20px;
  text-align: left;
  width: 300px;
  min-height: 80px;
  position: fixed;
  top: 10px;
  right: -320px;
  opacity: 0;
}

.d-flex {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
}

.col {
  flex: 1;
}

#toast.success {
  background-color: hsl(94, 40%, 86%);
  color: hsl(94, 90%, 16%);
}

.prev-workout h3 {
  font-size: 2rem;
  width: 100%;
}

.prev-workout p {
  margin-top: 5px;
  margin-bottom: 5px;
}

/* .workout .card {
  width: 350px;
} */

.prev-workout button {
  margin: 10px;
}

.new-workout {
  display: none;
}

.mt {
  margin-top: 20px;
}

.workout .ui.card {
  padding-top: 25px;
}

.prev-workout {
  text-align: center;
}

.prev-workout .buttons {
  display: flex;
  height: 75px;
  margin-top: 30px;
}

.buttons .ui.button {
  margin: 0;
  width: 50%;
}

.ui.card h2 {
  padding: 10px;
}

.buttons .ui.button:first-child {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.buttons .ui.button:nth-child(2) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  border-top-right-radius: 0;
}

.workout-type,
.cardio-form,
.resistance-form {
  padding: 10px;
}

@keyframes toast {
  50% {
    opacity: 1;
    right: 10px;
  }
  100% {
    opacity: 0;
    right: -320px;
  }
}
------------------------------------------------------------------------------------------

async function initWorkout() {
  const lastWorkout = await API.getLastWorkout();
  console.log("Last workout:", lastWorkout);
  if (lastWorkout) {
    document
      .querySelector("a[href='/exercise?']")
      .setAttribute("href", `/exercise?id=${lastWorkout._id}`);

    const workoutSummary = {
      date: formatDate(lastWorkout.day),
      totalDuration: lastWorkout.totalDuration,
      numExercises: lastWorkout.exercises.length,
      ...tallyExercises(lastWorkout.exercises)
    };

    renderWorkoutSummary(workoutSummary);
  } else {
    renderNoWorkoutText()
  }
}

function tallyExercises(exercises) {
  const tallied = exercises.reduce((acc, curr) => {
    if (curr.type === "resistance") {
      acc.totalWeight = (acc.totalWeight || 0) + curr.weight;
      acc.totalSets = (acc.totalSets || 0) + curr.sets;
      acc.totalReps = (acc.totalReps || 0) + curr.reps;
    } else if (curr.type === "cardio") {
      acc.totalDistance = (acc.totalDistance || 0) + curr.distance;
    }
    return acc;
  }, {});
  return tallied;
}

function formatDate(date) {
  const options = {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  };

  return new Date(date).toLocaleDateString(options);
}

function renderWorkoutSummary(summary) {
  const container = document.querySelector(".workout-stats");

  const workoutKeyMap = {
    date: "Date",
    totalDuration: "Total Workout Duration",
    numExercises: "Exercises Performed",
    totalWeight: "Total Weight Lifted",
    totalSets: "Total Sets Performed",
    totalReps: "Total Reps Performed",
    totalDistance: "Total Distance Covered"
  };

  Object.keys(summary).forEach(key => {
    const p = document.createElement("p");
    const strong = document.createElement("strong");

    strong.textContent = workoutKeyMap[key];
    const textNode = document.createTextNode(`: ${summary[key]}`);

    p.appendChild(strong);
    p.appendChild(textNode);

    container.appendChild(p);
  });
}

function renderNoWorkoutText() {
  const container = document.querySelector(".workout-stats");
  const p = document.createElement("p");
  const strong = document.createElement("strong");
  strong.textContent = "You have not created a workout yet!"

  p.appendChild(strong);
  container.appendChild(p);
}

initWorkout();
-----------------------------------------------------------------------------------------

let mongoose = require("mongoose");
let db = require("../models");

mongoose.connect("mongodb://localhost/workout", {
  useNewUrlParser: true,
  useFindAndModify: false
});

let workoutSeed = [
  {
    day: new Date().setDate(new Date().getDate()-10),
    exercises: [
      {
        type: "resistance",
        name: "Bicep Curl",
        duration: 20,
        weight: 100,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-9),
    exercises: [
      {
        type: "resistance",
        name: "Lateral Pull",
        duration: 20,
        weight: 300,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-8),
    exercises: [
      {
        type: "resistance",
        name: "Push Press",
        duration: 25,
        weight: 185,
        reps: 8,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-7),
    exercises: [
      {
        type: "cardio",
        name: "Running",
        duration: 25,
        distance: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-6),
    exercises: [
      {
        type: "resistance",
        name: "Bench Press",
        duration: 20,
        weight: 285,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-5),
    exercises: [
      {
        type: "resistance",
        name: "Bench Press",
        duration: 20,
        weight: 300,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-4),
    exercises: [
      {
        type: "resistance",
        name: "Quad Press",
        duration: 30,
        weight: 300,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-3),
    exercises: [
      {
        type: "resistance",
        name: "Bench Press",
        duration: 20,
        weight: 300,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-2),
    exercises: [
      {
        type: "resistance",
        name: "Military Press",
        duration: 20,
        weight: 300,
        reps: 10,
        sets: 4
      }
    ]
  },
  {
    day: new Date().setDate(new Date().getDate()-1),
    exercises: [
      {
        type: "resistance",
        name: "Bench",
        duration: 30,
        distance: 2
      }
    ]
  }
];

db.Workout.deleteMany({})
  .then(() => db.Workout.collection.insertMany(workoutSeed))
  .then(data => {
    console.log(data.result.n + " records inserted!");
    process.exit(0);
  })
  .catch(err => {
    console.error(err);
    process.exit(1);
  });
----------------------------------------------------------------------------------------

{
  "name": "mongoose_skeleton",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "watch": "nodemon server.js",
    "seed": "node seeders/seed.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.16.3",
    "mongoose": "^5.3.16",
    "morgan": "^1.9.1"
  }
}
-----------------------------------------------------------------------------------------

use workoutdb

db.workoutdb.insert({[
'name', 'age', 'weight', 'reps', 'resistance', 'cardio', 'duration', 'distance'
 ]})

